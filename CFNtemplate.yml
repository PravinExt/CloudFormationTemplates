
AWSTemplateFormatVersion: '2010-09-09'

Description: AWS API Gateway with a Lambda Integration

Parameters:
  AmazonAPIGatewayPushToCloudWatchLogs:
    Type: String
    Description: 'ARN of the first IAM Managed Policy to add to the role'
    Default: 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'

  AWSStepFunctionsFullAccess:
    Type: String
    Description: 'ARN of the second IAM Managed Policy to add to the role'
    Default: 'arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess'

  apiStageName:
    Type: "String"
    Description: API Staging Name. (Recommend to keep default)
    Default: "v1"

  paramBucketName:
    Type: String
    Description: Bucket Name

  pblambdafunctionsbucket:
    Type: String
    Description: lambda functions Bucket Name
    Default: "pblambdafunctions"

  LoantoCreditorZipFileName:
    Type: String
    Description: Name of LoantoCreditor zip file of S3 bucket

  LoanToDecisionEngineZipFileName:
    Type: String
    Description: Name of LoanToDecisionEngine zip file of S3 bucket

  CreditApprovalARN:
    Type: String
    Description: ARN of the CreditApproval Lambda function
    
  ApplicationSubmissionARN:
    Type: String
    Description: ARN of the ApplicationSubmission Lambda function
  
  LoanApprovalARN:
    Type: String
    Description: ARN of the LoanApproval Lambda function

  GetLoanStatusTypeBankerARN:
    Type: String
    Description: ARN of the GetLoanStatusTypeBanker Lambda function

  GetLoanStatusTypeCreditorARN:
    Type: String
    Description: ARN of the GetLoanStatusTypeCreditor Lambda function
  

Resources:

  MyStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: PBLoanProcessOrchestration
      DefinitionString: |-
        {
          "Comment": "This is your state machine",
          "StartAt": "UpdateLoanStatus",
          "States": {
            "UpdateLoanStatus": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "arn:aws:lambda:ap-south-1:618393550001:function:UpdateLoanStatus:$LATEST",
                "Payload.$": "$"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "Choice"
            },
            "Choice": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.LoanApplication_Status",
                  "NumericEquals": 5,
                  "Next": "Parallel"
                },
                {
                  "Variable": "$.LoanApplication_Status",
                  "NumericEquals": 6,
                  "Next": "DecisionQueueListener"
                }
              ],
              "Default": "Pass"
            },
            "Parallel": {
              "Type": "Parallel",
              "End": true,
              "Branches": [
                {
                  "StartAt": "OnLoanApprovedByCreditor",
                  "States": {
                    "OnLoanApprovedByCreditor": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "Payload.$": "$",
                        "FunctionName": "arn:aws:lambda:ap-south-1:618393550001:function:OnLoanApprovedByCreditor:$LATEST"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "UpdateLoanStatusByExternal",
                  "States": {
                    "UpdateLoanStatusByExternal": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "OutputPath": "$.Payload",
                      "Parameters": {
                        "Payload.$": "$",
                        "FunctionName": "arn:aws:lambda:ap-south-1:618393550001:function:UpdateLoanStatusByExternal:$LATEST"
                      },
                      "Retry": [
                        {
                          "ErrorEquals": [
                            "Lambda.ServiceException",
                            "Lambda.AWSLambdaException",
                            "Lambda.SdkClientException"
                          ],
                          "IntervalSeconds": 2,
                          "MaxAttempts": 6,
                          "BackoffRate": 2
                        }
                      ],
                      "End": true
                    }
                  }
                }
              ]
            },
            "DecisionQueueListener": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sqs:sendMessage",
              "Parameters": {
                "MessageBody.$": "$",
                "QueueUrl": "https://sqs.ap-south-1.amazonaws.com/618393550001/DecisionQueueListener"
              },
              "Next": "Pass"
            },
            "Pass": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  ExternalUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: ExternalService
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess'
        - 'arn:aws:iam::aws:policy/AWSCompromisedKeyQuarantineV2'

  CFNKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref ExternalUser

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
        - PolicyName: sqsfullaccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
             - Effect: Allow
               Action:
                - sqs:*
               Resource: "*"

  APIGatewayToStepFunctionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref AmazonAPIGatewayPushToCloudWatchLogs
        - !Ref AWSStepFunctionsFullAccess

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
        - PolicyName: stepfunctionsfullaccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
             - Effect: Allow
               Action:
                - states:*
               Resource: "*"
        - PolicyName: allowSqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
              Resource: 
              - !GetAtt MyQueue1.Arn
              - !GetAtt MyQueue2.Arn

  
  LambdaFunction1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LoantoCreditor
      Code:
        S3Bucket: !Ref pblambdafunctionsbucket
        S3Key: !Ref LoantoCreditorZipFileName
      Handler: CreditQueueListener::CreditQueueListener.Function::FunctionHandler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: dotnetcore2.1
      Timeout: 60
      MemorySize: 512

  LambdaFunction2:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LoanToDecisionEngine
      Code:
        S3Bucket: !Ref pblambdafunctionsbucket
        S3Key: !Ref LoanToDecisionEngineZipFileName
      Handler: LoanToDecisionEngine::LoanToDecisionEngine.Function::FunctionHandler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: dotnetcore2.1
      Timeout: 60
      MemorySize: 512

  LambdaFunctionEventSourceMapping1:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt MyQueue1.Arn
      FunctionName: !GetAtt LambdaFunction1.Arn

  LambdaFunctionEventSourceMapping2:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt MyQueue2.Arn
      FunctionName: !GetAtt LambdaFunction2.Arn

  MyQueue1:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'CreditDecision'
      DelaySeconds: 0
      VisibilityTimeout: 120

  MyQueue2:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'DecisionQueueListener'
      DelaySeconds: 0
      VisibilityTimeout: 120

  UserPool1:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: Applicants
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  UserPool2:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: Creditors
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  UserPool3:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: Bankers
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  UserPoolClient1:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ApplicantsApp
      GenerateSecret: false
      UserPoolId: !Ref UserPool1
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH

  UserPoolClient2:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: CreditorsApp
      GenerateSecret: false
      UserPoolId: !Ref UserPool2
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH

  UserPoolClient3:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: BankersApp
      GenerateSecret: false
      UserPoolId: !Ref UserPool3
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Ref paramBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  S3User:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: bucket-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:*
              Resource:
                - !Sub arn:aws:s3:::${S3Bucket}
                - !Sub arn:aws:s3:::${S3Bucket}/*
  S3UserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref S3User

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway for Lambda APIs
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Join ["", [{"Ref": "AWS::StackName"}, "-api"]]

  apiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "applicationsubmission"

  applicantResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref apiResource
      PathPart: "applicant"

  apiGatewayMethod1:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref ApplicationSubmissionARN
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

      ResourceId: !Ref applicantResource
      RestApiId: !Ref ApiGatewayRestApi

  apiGatewayMethod2:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref ApplicationSubmissionARN
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref applicantResource
      RestApiId: !Ref ApiGatewayRestApi

  applicantOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref applicantResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref applicantResource
      PathPart: '{proxy+}'

  ProxyResourceANY:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ProxyResource
      HttpMethod: ANY
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref ApplicationSubmissionARN

  applicantOptionsProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ProxyResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  businessResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref apiResource
      PathPart: "business"

  businessApiGatewayMethod1:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref ApplicationSubmissionARN
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref businessResource
      RestApiId: !Ref ApiGatewayRestApi

  businessApiGatewayMethod2:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref ApplicationSubmissionARN
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref businessResource
      RestApiId: !Ref ApiGatewayRestApi

  businessOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref businessResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  businessProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref businessResource
      PathPart: '{proxy+}'

  businessProxyResourceANY:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref businessProxyResource
      HttpMethod: ANY
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref ApplicationSubmissionARN

  businessOptionsProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref businessProxyResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  documentResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref apiResource
      PathPart: "document"

  documentApiGatewayMethod1:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref ApplicationSubmissionARN
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref documentResource
      RestApiId: !Ref ApiGatewayRestApi

  documentApiGatewayMethod2:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref ApplicationSubmissionARN
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref documentResource
      RestApiId: !Ref ApiGatewayRestApi

  documentOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref documentResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  documentProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref documentResource
      PathPart: '{proxy+}'

  documentProxyResourceANY:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref documentProxyResource
      HttpMethod: ANY
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref ApplicationSubmissionARN

  documentOptionsProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref documentProxyResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  loanResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref apiResource
      PathPart: "loan"

  loanApiGatewayMethod1:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref ApplicationSubmissionARN
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref loanResource
      RestApiId: !Ref ApiGatewayRestApi

  loanApiGatewayMethod2:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref ApplicationSubmissionARN
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref loanResource
      RestApiId: !Ref ApiGatewayRestApi

  loanOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref loanResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  loanProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref loanResource
      PathPart: '{proxy+}'

  loanProxyResourceANY:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref loanProxyResource
      HttpMethod: ANY
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref ApplicationSubmissionARN
        
  loanOptionsProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref loanProxyResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  creditorApprovalResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "creditapproval"

  creditResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref creditorApprovalResource
      PathPart: "creditor"

  creditapiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer2
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref CreditApprovalARN
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref creditResource
      RestApiId: !Ref ApiGatewayRestApi

  creditOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref creditResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  creditProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref creditResource
      PathPart: '{proxy+}'

  creditProxyResourceANY:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref creditProxyResource
      HttpMethod: ANY
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer2
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref CreditApprovalARN

  creditOptionsProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref creditProxyResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  loanApprovalResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "loanapproval"

  bankerResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref loanApprovalResource
      PathPart: "banker"

  bankerApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer3
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref LoanApprovalARN
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref bankerResource
      RestApiId: !Ref ApiGatewayRestApi

  bankerOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref bankerResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  bankerProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref bankerResource
      PathPart: '{proxy+}'

  bankerProxyResourceANY:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref bankerProxyResource
      HttpMethod: ANY
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer3
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref LoanApprovalARN

  bankerOptionsProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref bankerProxyResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  executionResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "execution"

  executionapiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      AuthorizationScopes: 
      - 'email'
      - 'openid'
      - 'aws.cognito.signin.user.admin'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer2
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:states:action/StartExecution"
        Credentials: !GetAtt APIGatewayToStepFunctionsRole.Arn
        RequestTemplates:
          application/json:
            !Sub
            - |-
              {
                "input": "$util.escapeJavaScript($input.json('$'))",
                "stateMachineArn": "${StepMachineArn}"
              }
            - StepMachineArn: !Ref MyStateMachine
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref executionResource
      RestApiId: !Ref ApiGatewayRestApi

  executionOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref executionResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  getloanstatustypebankerResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "getloanstatustypebanker"

  loanstatusbankerResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref getloanstatustypebankerResource
      PathPart: "loanstatus"

  loanstatusbankerMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref GetLoanStatusTypeBankerARN
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref loanstatusbankerResource
      RestApiId: !Ref ApiGatewayRestApi

  loanstatusbankerOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref loanstatusbankerResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  getloanstatustypecreditorResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "getloanstatustypecreditor"

  loanstatuscreditorResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !Ref getloanstatustypecreditorResource
      PathPart: "loanstatus"

  loanstatuscreditorMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Ref GetLoanStatusTypeCreditorARN
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
      ResourceId: !Ref loanstatuscreditorResource
      RestApiId: !Ref ApiGatewayRestApi

  loanstatuscreditorOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref loanstatuscreditorResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true


  ApiAuthorizer: 
    Type: "AWS::ApiGateway::Authorizer"
    Properties: 
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: method.request.header.Authorization
      Name: Applicants
      ProviderARNs: 
      - !GetAtt UserPool1.Arn
      RestApiId: !Ref ApiGatewayRestApi
      Type: "COGNITO_USER_POOLS"

  ApiAuthorizer2: 
    Type: "AWS::ApiGateway::Authorizer"
    Properties: 
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: method.request.header.Authorization
      Name: Creditors
      ProviderARNs: 
      - !GetAtt UserPool2.Arn
      RestApiId: !Ref ApiGatewayRestApi
      Type: "COGNITO_USER_POOLS"

  ApiAuthorizer3: 
    Type: "AWS::ApiGateway::Authorizer"
    Properties: 
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: method.request.header.Authorization
      Name: Bankers
      ProviderARNs: 
      - !GetAtt UserPool3.Arn
      RestApiId: !Ref ApiGatewayRestApi
      Type: "COGNITO_USER_POOLS"

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v1
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref "apiStageName"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ProxyResourceANY
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: 
                -  !Ref ApplicationSubmissionARN
                -  !Ref CreditApprovalARN
                -  !Ref LoanApprovalARN
                -  !Ref GetLoanStatusTypeBankerARN
                -  !Ref GetLoanStatusTypeCreditorARN
                 
  
  LambdaPermission1:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ApplicationSubmissionARN
      Action: lambda:InvokeFunction
      Principal: 'apigateway.amazonaws.com'

  LambdaPermission2:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CreditApprovalARN
      Action: lambda:InvokeFunction
      Principal: 'apigateway.amazonaws.com'

  LambdaPermission3:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoanApprovalARN
      Action: lambda:InvokeFunction
      Principal: 'apigateway.amazonaws.com'
  
  LambdaPermission4:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetLoanStatusTypeBankerARN
      Action: lambda:InvokeFunction
      Principal: 'apigateway.amazonaws.com'

  LambdaPermission5:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetLoanStatusTypeCreditorARN
      Action: lambda:InvokeFunction
      Principal: 'apigateway.amazonaws.com'

  ApiUsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    DependsOn: ApiGatewayStage
    Properties:
      ApiStages: 
      - ApiId: !Ref ApiGatewayRestApi
        Stage: !Ref "apiStageName"    
      Description: !Join [" ", [{"Ref": "AWS::StackName"}, "usage plan"]]
      UsagePlanName: !Join ["", [{"Ref": "AWS::StackName"}, "-usage-plan"]]

  
      
Outputs:
  BucketName:
    Value: !Ref 'S3Bucket'
    Description: Name of the Amazon S3 bucket.
  S3BucketSecureURL:
    Value: !Join ['', ['https://', !GetAtt [S3Bucket, DomainName]]]
    Description: Domain Name of the Amazon S3 bucket
  AccessKeyID:
    Value: !Ref S3UserAccessKey
  SecretAccessKey:
    Value: !GetAtt S3UserAccessKey.SecretAccessKey
  BucketName:
    Value: !Ref S3Bucket
  User:
    Value: !Ref S3User
  AccessKey:
    Value: !Ref 'CFNKeys'
    Description: AWSAccessKeyId of new user
  SecretKey:
    Value: !GetAtt [CFNKeys, SecretAccessKey]
    Description: AWSSecretAccessKey of new user
  ApplicantUserPoolID:
    Value: !Ref UserPool1
  ApplicantUserPoolClientID:
    Value: !Ref UserPoolClient1
  CreditorsUserPoolID:
    Value: !Ref UserPool2
  CreditorsUserPoolClientID:
    Value: !Ref UserPoolClient2
  BankersUserPoolID:
    Value: !Ref UserPool3
  BankersUserPoolClientID:
    Value: !Ref UserPoolClient3
  MyStateMachineARN:
    Value: !Ref MyStateMachine
